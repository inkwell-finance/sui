{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/state/index.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,mBAAmB,EAAE,mBAAmB,EAAE,MAAM,aAAa,CAAC;AAWvE,MAAM,OAAO,KAAK;IAChB,YAAqB,MAAyB,EAAW,OAAe;QAAnD,WAAM,GAAN,MAAM,CAAmB;QAAW,YAAO,GAAP,OAAO,CAAQ;IAAG,CAAC;IAE5E;;OAEG;IACI,KAAK,CAAC,QAAQ;QACnB,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM;aAC1C,SAAS,CAAC;YACT,EAAE,EAAE,IAAI,CAAC,OAAO;YAChB,OAAO,EAAE;gBACP,WAAW,EAAE,IAAI;gBACjB,QAAQ,EAAE,IAAI;aACf;SACF,CAAC;aACD,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAE7B,+BAA+B;QAC/B,OAAO,KAAK,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;IAC5C,CAAC;IAEM,MAAM,CAAC,cAAc,CAAC,YAAiB;QAC5C,wBAAwB;QACxB,OAAO;YACL,aAAa,EAAE,mBAAmB,CAAC,QAAQ,CAAC,YAAY,CAAC,cAAc,CAAC;YACxE,EAAE,EAAE,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC;YAC7C,iBAAiB,EAAE,mBAAmB,CAAC,QAAQ,CAC7C,YAAY,CAAC,oBAAoB,CAClC;YACD,WAAW,EAAE,mBAAmB,CAAC,QAAQ,CAAC,YAAY,CAAC,YAAY,CAAC;SACrE,CAAC;IACJ,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,KAAK,CACvB,MAAiB,EACjB,OAAe;QAEf,MAAM,YAAY,GAAG,MAAM,MAAM;aAC9B,SAAS,CAAC;YACT,EAAE,EAAE,OAAO;YACX,OAAO,EAAE;gBACP,WAAW,EAAE,IAAI;gBACjB,QAAQ,EAAE,IAAI;aACf;SACF,CAAC;aACD,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC7B,OAAO,KAAK,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;IAC5C,CAAC;CACF","sourcesContent":["import type { SwitchboardClient } from \"../index.js\";\nimport { getFieldsFromObject, ObjectParsingHelper } from \"../index.js\";\n\nimport type { SuiClient } from \"@mysten/sui/client\";\n\nexport interface StateData {\n  id: string;\n  guardianQueue: string;\n  oracleQueue: string;\n  onDemandPackageId: string;\n}\n\nexport class State {\n  constructor(readonly client: SwitchboardClient, readonly address: string) {}\n\n  /**\n   * Get the state data object\n   */\n  public async loadData(): Promise<StateData> {\n    const receivedData = await this.client.client\n      .getObject({\n        id: this.address,\n        options: {\n          showContent: true,\n          showType: true,\n        },\n      })\n      .then(getFieldsFromObject);\n\n    // return the data in camelCase\n    return State.parseStateData(receivedData);\n  }\n\n  public static parseStateData(receivedData: any): StateData {\n    // build from the result\n    return {\n      guardianQueue: ObjectParsingHelper.asString(receivedData.guardian_queue),\n      id: ObjectParsingHelper.asId(receivedData.id),\n      onDemandPackageId: ObjectParsingHelper.asString(\n        receivedData.on_demand_package_id\n      ),\n      oracleQueue: ObjectParsingHelper.asString(receivedData.oracle_queue),\n    };\n  }\n\n  public static async fetch(\n    client: SuiClient,\n    address: string\n  ): Promise<StateData> {\n    const receivedData = await client\n      .getObject({\n        id: address,\n        options: {\n          showContent: true,\n          showType: true,\n        },\n      })\n      .then(getFieldsFromObject);\n    return State.parseStateData(receivedData);\n  }\n}\n"]}