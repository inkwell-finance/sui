{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/aggregator/index.ts"],"names":[],"mappings":"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","sourcesContent":["import type { CommonOptions, SwitchboardClient } from \"../index.js\";\nimport {\n  getFieldsFromObject,\n  ObjectParsingHelper,\n  Queue,\n  solanaProgramCache,\n  suiQueueCache,\n} from \"../index.js\";\n\nimport type { SuiGraphQLClient } from \"@mysten/sui/graphql\";\nimport { graphql } from \"@mysten/sui/graphql/schemas/2024.4\";\nimport type { Transaction } from \"@mysten/sui/transactions\";\nimport {\n  fromBase64,\n  fromHex,\n  SUI_CLOCK_OBJECT_ID,\n  SUI_TYPE_ARG,\n  toBase58,\n  toHex,\n} from \"@mysten/sui/utils\";\nimport { CrossbarClient, OracleJob } from \"@switchboard-xyz/common\";\nimport type {\n  FeedEvalResponse,\n  Queue as SolanaQueue,\n} from \"@switchboard-xyz/on-demand\";\nimport {\n  getDefaultDevnetQueue,\n  getDefaultQueue,\n  ON_DEMAND_DEVNET_QUEUE,\n  ON_DEMAND_MAINNET_QUEUE,\n} from \"@switchboard-xyz/on-demand\";\nimport type BN from \"bn.js\";\n\nexport interface AggregatorInitParams extends CommonOptions {\n  authority: string;\n  name: string;\n  feedHash: string;\n  minSampleSize: number;\n  maxStalenessSeconds: number;\n  maxVariance: number;\n  minResponses: number;\n}\n\nexport interface AggregatorConfigParams extends CommonOptions {\n  aggregator: string;\n  name: string;\n  feedHash: string;\n  minSampleSize: number;\n  maxStalenessSeconds: number;\n  maxVariance: number;\n  minResponses: number;\n}\n\nexport interface AggregatorSetAuthorityParams extends CommonOptions {\n  aggregator: string;\n  newAuthority: string;\n}\n\nexport interface AggregatorConfigs {\n  feedHash: string;\n  maxVariance: number;\n  minResponses: number;\n  minSampleSize: number;\n}\n\nexport interface AggregatorFetchUpdateIxParams extends CommonOptions {\n  solanaRPCUrl?: string;\n  crossbarUrl?: string;\n  crossbarClient?: CrossbarClient;\n\n  // If passed in, Sui Aggregator load can be skipped\n  feedConfigs?: AggregatorConfigs;\n\n  // If passed in, Sui Queue load can be skipped\n  queue?: Queue;\n}\n\nexport interface CurrentResultData {\n  maxResult: BN;\n  maxTimestamp: number;\n  mean: BN;\n  minResult: BN;\n  minTimestamp: number;\n  range: BN;\n  result: BN;\n  stdev: BN;\n}\n\nexport interface Update {\n  oracle: string;\n  value: BN;\n  timestamp: number;\n}\n\nexport interface AggregatorData {\n  id: string;\n  authority: string;\n  createdAtMs: number;\n  currentResult: CurrentResultData;\n  feedHash: string;\n  maxStalenessSeconds: number;\n  maxVariance: number;\n  minResponses: number;\n  minSampleSize: number;\n  name: string;\n  queue: string;\n  updateState: {\n    currIdx: number;\n    results: Update[];\n  };\n}\n\nexport class Aggregator {\n  public crossbarClient?: CrossbarClient;\n  public feedHash?: string;\n\n  constructor(readonly client: SwitchboardClient, readonly address: string) {}\n\n  /**\n   * Create a new Aggregator\n   * @param client - SuiClient\n   * @param tx - Transaction\n   * @param options - AggregatorInitParams\n   * @constructor\n   */\n  public static async initTx(\n    client: SwitchboardClient,\n    tx: Transaction,\n    options: AggregatorInitParams\n  ) {\n    const { switchboardAddress, oracleQueueId } = await client.fetchState(\n      options\n    );\n\n    tx.moveCall({\n      target: `${switchboardAddress}::aggregator_init_action::run`,\n      arguments: [\n        tx.object(oracleQueueId),\n        tx.pure.address(options.authority),\n        tx.pure.string(options.name),\n        tx.pure.vector(\"u8\", Array.from(fromHex(options.feedHash))),\n        tx.pure.u64(options.minSampleSize),\n        tx.pure.u64(options.maxStalenessSeconds),\n        tx.pure.u64(options.maxVariance),\n        tx.pure.u32(options.minResponses),\n        tx.object(SUI_CLOCK_OBJECT_ID),\n      ],\n    });\n  }\n\n  /**\n   * Set configs for the Aggregator\n   * @param tx - Transaction\n   * @param options - AggregatorConfigParams\n   */\n  public async setConfigsTx(tx: Transaction, options: AggregatorConfigParams) {\n    const { switchboardAddress } = await this.client.fetchState(options);\n\n    tx.moveCall({\n      target: `${switchboardAddress}::aggregator_set_configs_action::run`,\n      arguments: [\n        tx.object(this.address),\n        tx.pure.vector(\"u8\", Array.from(fromHex(options.feedHash))),\n        tx.pure.u64(options.minSampleSize),\n        tx.pure.u64(options.maxStalenessSeconds),\n        tx.pure.u64(options.maxVariance),\n        tx.pure.u32(options.minResponses),\n      ],\n    });\n  }\n\n  /**\n   * Set the feed authority\n   * @param tx - Transaction\n   * @param options - AggregatorSetAuthorityParams\n   */\n  public async setAuthorityTx(\n    tx: Transaction,\n    options: AggregatorSetAuthorityParams\n  ) {\n    const { switchboardAddress } = await this.client.fetchState(options);\n\n    tx.moveCall({\n      target: `${switchboardAddress}::aggregator_set_authority_action::run`,\n      arguments: [\n        tx.object(this.address),\n        tx.pure.address(options.newAuthority),\n      ],\n    });\n  }\n\n  /**\n   * Pull feed tx\n   * @param tx - Transaction\n   * @param options - CommonOptions\n   */\n  public async fetchUpdateTx(\n    tx: Transaction,\n    options?: AggregatorFetchUpdateIxParams\n  ): Promise<{\n    responses: FeedEvalResponse[];\n    failures: string[];\n  }> {\n    const { switchboardAddress, oracleQueueId } = await this.client.fetchState(\n      options\n    );\n\n    // get the feed configs if we need them / they aren't passed in\n    let feedConfigs = options?.feedConfigs;\n    if (!feedConfigs) {\n      const aggregatorData = await this.loadData();\n      feedConfigs = {\n        minSampleSize: aggregatorData.minSampleSize,\n        feedHash: aggregatorData.feedHash,\n        maxVariance: aggregatorData.maxVariance,\n        minResponses: aggregatorData.minResponses,\n      };\n    }\n\n    // get the sui queue from cache\n    let suiQueue = suiQueueCache.get(oracleQueueId);\n    if (!suiQueue) {\n      const queue = await new Queue(this.client, oracleQueueId).loadData();\n      suiQueueCache.set(oracleQueueId, queue);\n      suiQueue = queue;\n    }\n\n    // load the solana queue from cache or fetch it\n    let solanaQueue: SolanaQueue;\n    if (suiQueue.queueKey === ON_DEMAND_MAINNET_QUEUE.toBase58()) {\n      solanaQueue = solanaProgramCache.get(ON_DEMAND_MAINNET_QUEUE.toBase58());\n      if (!solanaQueue) {\n        solanaQueue = await getDefaultQueue(options?.solanaRPCUrl);\n        solanaProgramCache.set(ON_DEMAND_MAINNET_QUEUE.toBase58(), solanaQueue);\n      }\n    } else if (suiQueue.queueKey === ON_DEMAND_DEVNET_QUEUE.toBase58()) {\n      solanaQueue = solanaProgramCache.get(ON_DEMAND_DEVNET_QUEUE.toBase58());\n      if (!solanaQueue) {\n        solanaQueue = await getDefaultDevnetQueue(options?.solanaRPCUrl);\n        solanaProgramCache.set(ON_DEMAND_DEVNET_QUEUE.toBase58(), solanaQueue);\n      }\n    } else {\n      throw new Error(\"[fetchUpdateTx]: QUEUE NOT FOUND\");\n    }\n\n    // fail out if we can't load the queue\n    if (!solanaQueue) {\n      throw new Error(\n        `Could not load the Switchboard Queue - Queue pubkey: ${suiQueue.queueKey}`\n      );\n    }\n\n    // fetch the jobs from crossbar\n    const crossbarClient =\n      options?.crossbarClient ??\n      new CrossbarClient(\n        options?.crossbarUrl ?? \"https://crossbar.switchboard.xyz\"\n      );\n    const jobs: OracleJob[] = await crossbarClient\n      .fetch(feedConfigs.feedHash)\n      .then((res) => res.jobs.map((job) => OracleJob.fromObject(job)));\n\n    // fetch the signatures\n    const { responses, failures } = await solanaQueue.fetchSignatures({\n      jobs,\n\n      // Make this more granular in the canonical fetch signatures (within @switchboard-xyz/on-demand)\n      maxVariance: Math.floor(feedConfigs.maxVariance / 1e9),\n      minResponses: feedConfigs.minResponses,\n      numSignatures: feedConfigs.minSampleSize,\n\n      // blockhash checks aren't possible yet on SUI\n      recentHash: toBase58(new Uint8Array(32)),\n      useTimestamp: true,\n    });\n\n    // filter out responses that don't have available oracles\n    const validOracles = new Set(\n      suiQueue.existingOracles.map((o) => o.oracleKey)\n    );\n\n    const validResponses = responses.filter((r) => {\n      return validOracles.has(toBase58(fromHex(r.oracle_pubkey)));\n    });\n\n    // if we have no valid responses (or not enough), fail out\n    if (\n      !validResponses.length ||\n      validResponses.length < feedConfigs.minSampleSize\n    ) {\n      // maybe retry by recursing into the same function / add a retry count\n      throw new Error(\"Not enough valid oracle responses.\");\n    }\n\n    // split the gas coin into the right amount for each response\n    const coins = tx.splitCoins(\n      tx.gas,\n      validResponses.map(() => suiQueue.fee)\n    );\n\n    // map the responses into the tx\n    validResponses.forEach((response, i) => {\n      const oracle = suiQueue.existingOracles.find(\n        (o) => o.oracleKey === toBase58(fromHex(response.oracle_pubkey))\n      )!;\n\n      const signature = Array.from(fromBase64(response.signature));\n      signature.push(response.recovery_id);\n\n      tx.moveCall({\n        target: `${switchboardAddress}::aggregator_submit_result_action::run`,\n        arguments: [\n          tx.object(this.address),\n          tx.object(suiQueue.id),\n          tx.pure.u128(response.success_value),\n          tx.pure.bool(response.success_value.startsWith(\"-\")),\n          tx.pure.u64(response.timestamp!),\n          tx.object(oracle.oracleId),\n          tx.pure.vector(\"u8\", signature),\n          tx.object(SUI_CLOCK_OBJECT_ID),\n          coins[i],\n        ],\n        typeArguments: [SUI_TYPE_ARG],\n      });\n    });\n\n    return { responses, failures };\n  }\n\n  /**\n   * Get the feed data object\n   */\n  public async loadData(): Promise<AggregatorData> {\n    const aggregatorData = await this.client.client\n      .getObject({\n        id: this.address,\n        options: {\n          showContent: true,\n          showType: false,\n        },\n      })\n      .then(getFieldsFromObject);\n\n    const currentResult = (aggregatorData.current_result as any).fields;\n    const updateState = (aggregatorData.update_state as any).fields;\n\n    // build the data object\n    const data: AggregatorData = {\n      id: ObjectParsingHelper.asId(aggregatorData.id),\n      authority: ObjectParsingHelper.asString(aggregatorData.authority),\n      createdAtMs: ObjectParsingHelper.asNumber(aggregatorData.created_at_ms),\n      currentResult: {\n        maxResult: ObjectParsingHelper.asBN(currentResult.max_result),\n        maxTimestamp: ObjectParsingHelper.asNumber(\n          currentResult.max_timestamp_ms\n        ),\n        mean: ObjectParsingHelper.asBN(currentResult.mean),\n        minResult: ObjectParsingHelper.asBN(currentResult.min_result),\n        minTimestamp: ObjectParsingHelper.asNumber(\n          currentResult.min_timestamp_ms\n        ),\n        range: ObjectParsingHelper.asBN(currentResult.range),\n        result: ObjectParsingHelper.asBN(currentResult.result),\n        stdev: ObjectParsingHelper.asBN(currentResult.stdev),\n      },\n      feedHash: toHex(\n        ObjectParsingHelper.asUint8Array(aggregatorData.feed_hash)\n      ),\n      maxStalenessSeconds: ObjectParsingHelper.asNumber(\n        aggregatorData.max_staleness_seconds\n      ),\n      maxVariance: ObjectParsingHelper.asNumber(aggregatorData.max_variance),\n      minResponses: ObjectParsingHelper.asNumber(aggregatorData.min_responses),\n      minSampleSize: ObjectParsingHelper.asNumber(\n        aggregatorData.min_sample_size\n      ),\n      name: ObjectParsingHelper.asString(aggregatorData.name),\n      queue: ObjectParsingHelper.asString(aggregatorData.queue),\n      updateState: {\n        currIdx: ObjectParsingHelper.asNumber(updateState.curr_idx),\n        results: updateState.results.map((r: any) => {\n          const oracleId = r.fields.oracle;\n          const value = ObjectParsingHelper.asBN(r.fields.result.fields);\n          const timestamp = parseInt(r.fields.timestamp_ms);\n          return {\n            oracle: oracleId,\n            value,\n            timestamp,\n          };\n        }),\n      },\n    };\n\n    return data;\n  }\n\n  /**\n   * Load all feeds\n   */\n  public static async loadAllFeeds(\n    graphqlClient: SuiGraphQLClient,\n    switchboardAddress: string\n  ): Promise<AggregatorData[]> {\n    // Query to fetch Aggregator objects with pagination supported.\n    const query = graphql(`\n      query($cursor: String) {\n        objects(\n          first: 50,\n          after: $cursor,\n          filter: {\n            type: \"${switchboardAddress}::aggregator::Aggregator\"\n          }\n        ) {\n          nodes {\n            address\n            digest\n            asMoveObject {\n              contents {\n                json\n              }\n            }\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    `);\n\n    const parseAggregator = (moveObject: any): AggregatorData => {\n      return {\n        id: moveObject.id,\n        authority: moveObject.authority,\n        createdAtMs: ObjectParsingHelper.asNumber(moveObject.created_at_ms),\n        currentResult: {\n          maxResult: ObjectParsingHelper.asBN(\n            moveObject.current_result.max_result\n          ),\n          maxTimestamp: ObjectParsingHelper.asNumber(\n            moveObject.current_result.max_timestamp_ms\n          ),\n          mean: ObjectParsingHelper.asBN(moveObject.current_result.mean),\n          minResult: ObjectParsingHelper.asBN(\n            moveObject.current_result.min_result\n          ),\n          minTimestamp: ObjectParsingHelper.asNumber(\n            moveObject.current_result.min_timestamp_ms\n          ),\n          range: ObjectParsingHelper.asBN(moveObject.current_result.range),\n          result: ObjectParsingHelper.asBN(moveObject.current_result.result),\n          stdev: ObjectParsingHelper.asBN(moveObject.current_result.stdev),\n        },\n        feedHash: toHex(ObjectParsingHelper.asUint8Array(moveObject.feed_hash)),\n        maxStalenessSeconds: ObjectParsingHelper.asNumber(\n          moveObject.max_staleness_seconds\n        ),\n        maxVariance: ObjectParsingHelper.asNumber(moveObject.max_variance),\n        minResponses: ObjectParsingHelper.asNumber(moveObject.min_responses),\n        minSampleSize: ObjectParsingHelper.asNumber(moveObject.min_sample_size),\n        name: ObjectParsingHelper.asString(moveObject.name),\n        queue: ObjectParsingHelper.asString(moveObject.queue),\n        updateState: {\n          currIdx: ObjectParsingHelper.asNumber(\n            moveObject.update_state.curr_idx\n          ),\n          results: moveObject.update_state.results.map((r: any) => {\n            const oracleId = r.oracle;\n            const value = ObjectParsingHelper.asBN(r.result);\n            const timestamp = parseInt(r.timestamp_ms);\n            return {\n              oracle: oracleId,\n              value,\n              timestamp,\n            };\n          }),\n        },\n      };\n    };\n\n    const fetchAggregators = async (cursor: string | null) => {\n      const results = await graphqlClient.query({\n        query,\n        variables: { cursor },\n      });\n\n      const aggregators: AggregatorData[] =\n        results.data?.objects?.nodes?.map((result) => {\n          const moveObject = result.asMoveObject!.contents!.json as any;\n          // build the data object from moveObject which looks like the above json\n          return parseAggregator(moveObject);\n        }) ?? [];\n      const hasNextPage = results.data?.objects?.pageInfo?.hasNextPage ?? false;\n      const endCursor = results.data?.objects?.pageInfo?.endCursor ?? null;\n\n      // Recursively fetch the next page if there is one.\n      if (hasNextPage) aggregators.push(...(await fetchAggregators(endCursor)));\n      // Return the list of aggregators.\n      return aggregators;\n    };\n    return await fetchAggregators(null);\n  }\n}\n"]}