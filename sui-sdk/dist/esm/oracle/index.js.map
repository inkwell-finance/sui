{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/oracle/index.ts"],"names":[],"mappings":"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","sourcesContent":["import type { CommonOptions, SwitchboardClient } from \"../index.js\";\nimport {\n  getFieldsFromObject,\n  ObjectParsingHelper,\n  Queue,\n  solanaProgramCache,\n  suiQueueCache,\n} from \"../index.js\";\n\nimport type { SuiGraphQLClient } from \"@mysten/sui/graphql\";\nimport { graphql } from \"@mysten/sui/graphql/schemas/2024.4\";\nimport type { Transaction } from \"@mysten/sui/transactions\";\nimport {\n  fromBase58,\n  fromBase64,\n  fromHex,\n  SUI_CLOCK_OBJECT_ID,\n  toBase58,\n  toHex,\n} from \"@mysten/sui/utils\";\nimport type {\n  BridgeEnclaveResponse,\n  Queue as SolanaQueue,\n} from \"@switchboard-xyz/on-demand\";\nimport {\n  getDefaultDevnetGuardianQueue,\n  getDefaultGuardianQueue,\n  ON_DEMAND_DEVNET_GUARDIAN_QUEUE,\n  ON_DEMAND_MAINNET_GUARDIAN_QUEUE,\n} from \"@switchboard-xyz/on-demand\";\n\nexport interface OracleInitParams extends CommonOptions {\n  oracleKey: string;\n  isGuardian?: boolean;\n}\n\nexport interface OracleAttestParams extends CommonOptions {\n  minAttestations: number;\n  isGuardian?: boolean;\n  solanaRPCUrl?: string;\n}\nexport interface OracleData {\n  expirationTime: number;\n  id: string;\n  mrEnclave: string;\n  oracleKey: string;\n  queue: string;\n  queueKey: string;\n  secp256k1Key: string;\n  validAttestations: any[];\n}\n\nexport class Oracle {\n  constructor(readonly client: SwitchboardClient, readonly address: string) {}\n\n  /**\n   * Create a new Oracle\n   */\n  public static async initTx(\n    client: SwitchboardClient,\n    tx: Transaction,\n    options: OracleInitParams\n  ) {\n    const { switchboardAddress, oracleQueueId, guardianQueueId } =\n      await client.fetchState(options);\n    const queueId = options.isGuardian ? guardianQueueId : oracleQueueId;\n    tx.moveCall({\n      target: `${switchboardAddress}::oracle_init_action::run`,\n      arguments: [\n        tx.pure.vector(\"u8\", Array.from(fromHex(options.oracleKey))),\n        tx.object(queueId),\n      ],\n    });\n  }\n\n  /**\n   * Oracle attest Tx\n   */\n  public async attestTx(tx: Transaction, options: OracleAttestParams) {\n    const { switchboardAddress, oracleQueueId, guardianQueueId } =\n      await this.client.fetchState(options);\n\n    const queueId = options.isGuardian ? guardianQueueId : oracleQueueId;\n\n    const oracleData = await this.loadData();\n\n    // get the sui queue from cache\n    let suiQueue = suiQueueCache.get(oracleData.queue);\n    if (!suiQueue) {\n      const queue = await new Queue(this.client, queueId).loadData();\n      suiQueueCache.set(queueId, queue);\n      suiQueue = queue;\n    }\n\n    let suiGuardianQueue = suiQueueCache.get(suiQueue.guardianQueueId);\n    if (!suiGuardianQueue) {\n      const queue = await new Queue(\n        this.client,\n        suiQueue.guardianQueueId\n      ).loadData();\n      suiQueueCache.set(suiQueue.guardianQueueId, queue);\n      suiGuardianQueue = queue;\n    }\n\n    // load the solana guardian queue from cache or fetch it\n    let solanaGuardianQueue: SolanaQueue;\n    if (\n      suiGuardianQueue.queueKey == ON_DEMAND_MAINNET_GUARDIAN_QUEUE.toBase58()\n    ) {\n      solanaGuardianQueue = solanaProgramCache.get(\n        ON_DEMAND_MAINNET_GUARDIAN_QUEUE.toBase58()\n      );\n      if (!solanaGuardianQueue) {\n        solanaGuardianQueue = await getDefaultGuardianQueue(\n          options.solanaRPCUrl\n        );\n        solanaProgramCache.set(\n          ON_DEMAND_MAINNET_GUARDIAN_QUEUE.toBase58(),\n          solanaGuardianQueue\n        );\n      }\n    } else if (\n      suiQueue.queueKey == ON_DEMAND_DEVNET_GUARDIAN_QUEUE.toBase58()\n    ) {\n      solanaGuardianQueue = solanaProgramCache.get(\n        ON_DEMAND_DEVNET_GUARDIAN_QUEUE.toBase58()\n      );\n      if (!solanaGuardianQueue) {\n        solanaGuardianQueue = await getDefaultDevnetGuardianQueue(\n          options.solanaRPCUrl\n        );\n        solanaProgramCache.set(\n          ON_DEMAND_DEVNET_GUARDIAN_QUEUE.toBase58(),\n          solanaGuardianQueue\n        );\n      }\n    }\n\n    // load up the gateways\n    const guardianGateways = await solanaGuardianQueue.fetchAllGateways();\n\n    // get the bridge messages\n    const getBridgingMessages = async (): Promise<BridgeEnclaveResponse[]> => {\n      // shuffle the gateways\n      guardianGateways.sort(() => Math.random() - 0.5);\n\n      // slice min attestations\n      const gateways = guardianGateways.slice(0, options.minAttestations);\n\n      // bridge gateway promises\n      const gatewayPromises = gateways.map((g) =>\n        g.fetchBridgingMessage({\n          chainHash: \"0\".repeat(64),\n          oraclePubkey: toHex(fromBase58(oracleData.oracleKey)),\n          queuePubkey: toHex(fromBase58(oracleData.queueKey)),\n        })\n      );\n\n      // wait until they're all settled\n      const messages = await Promise.allSettled(gatewayPromises);\n\n      // get the bridge messages\n      return messages\n        .map((m) => {\n          if (m.status === \"fulfilled\") {\n            return m.value;\n          }\n        })\n        .filter((m) => m);\n    };\n\n    const bridgeMessages: BridgeEnclaveResponse[] = [];\n\n    // try 3 times to get the bridge messages\n    for (let i = 0; i < 3; i++) {\n      bridgeMessages.push(...(await getBridgingMessages()));\n      if (bridgeMessages.length >= options.minAttestations) {\n        break;\n      }\n    }\n\n    // if we don't have enough bridge messages - throw an error\n    if (bridgeMessages.length < options.minAttestations) {\n      throw new Error(\"Not enough bridge messages\");\n    }\n\n    bridgeMessages.forEach((message: BridgeEnclaveResponse) => {\n      const signature = Array.from(fromBase64(message.signature));\n      signature.push(message.recovery_id);\n      const mrEnclave = message.mr_enclave;\n      const secp256k1Key = message.oracle_secp256k1_enclave_signer;\n      const guardian = toBase58(fromHex(message.guardian));\n      const guardianId = suiGuardianQueue.existingOracles.find(\n        (o) => o.oracleKey === guardian\n      )?.oracleId;\n\n      if (!guardianId) {\n        console.error(\"Guardian not found\", guardian);\n        return;\n      }\n\n      tx.moveCall({\n        target: `${switchboardAddress}::oracle_attest_action::run`,\n        arguments: [\n          tx.object(this.address),\n          tx.object(oracleData.queue),\n          tx.object(guardianId),\n          tx.pure.u64(message.timestamp),\n          tx.pure.vector(\"u8\", Array.from(fromHex(mrEnclave))),\n          tx.pure.vector(\"u8\", Array.from(fromHex(secp256k1Key))),\n          tx.pure.vector(\"u8\", signature),\n          tx.object(SUI_CLOCK_OBJECT_ID),\n        ],\n      });\n    });\n  }\n\n  public static parseOracleData(oracleData: any): OracleData {\n    return {\n      expirationTime: ObjectParsingHelper.asNumber(\n        oracleData.expiration_time_ms\n      ),\n      id: ObjectParsingHelper.asId(oracleData.id),\n      mrEnclave: toHex(ObjectParsingHelper.asUint8Array(oracleData.mr_enclave)),\n      oracleKey: toBase58(\n        ObjectParsingHelper.asUint8Array(oracleData.oracle_key)\n      ),\n      queue: ObjectParsingHelper.asString(oracleData.queue),\n      queueKey: toBase58(\n        ObjectParsingHelper.asUint8Array(oracleData.queue_key)\n      ),\n      secp256k1Key: toHex(\n        ObjectParsingHelper.asUint8Array(oracleData.secp256k1_key)\n      ),\n      validAttestations: ObjectParsingHelper.asArray(\n        oracleData.valid_attestations\n      ),\n    };\n  }\n\n  /**\n   * Get the oracle data object\n   */\n  public async loadData(): Promise<OracleData> {\n    const oracleData = await this.client.client\n      .getObject({\n        id: this.address,\n        options: {\n          showContent: true,\n          showType: true,\n        },\n      })\n      .then(getFieldsFromObject);\n\n    return Oracle.parseOracleData(oracleData);\n  }\n\n  public static async loadAllOracles(\n    graphqlClient: SuiGraphQLClient,\n    switchboardAddress: string\n  ): Promise<OracleData[]> {\n    const fetchAggregatorsQuery = graphql(`\n      query {\n        objects(\n          filter: {\n            type: \"${switchboardAddress}::oracle::Oracle\"\n          }\n        ) {\n          nodes {\n            address\n            digest\n            asMoveObject {\n              contents {\n                json\n              }\n            }\n          }\n        }\n      }\n    `);\n    const result = await graphqlClient.query({\n      query: fetchAggregatorsQuery,\n    });\n\n    const oracleData: OracleData[] = result.data?.objects?.nodes?.map(\n      (result) => {\n        const moveObject = result.asMoveObject.contents.json as any;\n\n        // build the data object from moveObject which looks like the above json\n        return {\n          expirationTime: ObjectParsingHelper.asNumber(\n            moveObject.expiration_time_ms\n          ),\n          id: moveObject.id,\n          mrEnclave: toHex(\n            ObjectParsingHelper.asUint8Array(moveObject.mr_enclave)\n          ),\n          oracleKey: toBase58(\n            ObjectParsingHelper.asUint8Array(moveObject.oracle_key)\n          ),\n          queue: ObjectParsingHelper.asString(moveObject.queue),\n          queueKey: toBase58(\n            ObjectParsingHelper.asUint8Array(moveObject.queue_key)\n          ),\n          secp256k1Key: toHex(\n            ObjectParsingHelper.asUint8Array(moveObject.secp256k1_key)\n          ),\n          validAttestations: ObjectParsingHelper.asArray(\n            moveObject.valid_attestations\n          ),\n        };\n      }\n    );\n\n    return oracleData;\n  }\n\n  public static async loadMany(\n    client: SwitchboardClient,\n    oracles: string[]\n  ): Promise<OracleData[]> {\n    const oracleData = await client.client\n      .multiGetObjects({\n        ids: oracles,\n        options: {\n          showContent: true,\n          showType: true,\n        },\n      })\n      .then((o) => o.map(getFieldsFromObject));\n\n    return oracleData.map((o) => this.parseOracleData(o));\n  }\n}\n"]}