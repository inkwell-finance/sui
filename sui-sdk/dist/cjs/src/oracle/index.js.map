{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/oracle/index.ts"],"names":[],"mappings":"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","sourcesContent":["import type { CommonOptions, SwitchboardClient } from \"../index.js\";\nimport {\n  getFieldsFromObject,\n  ObjectParsingHelper,\n  Queue,\n  solanaProgramCache,\n  suiQueueCache,\n} from \"../index.js\";\n\nimport type { SuiGraphQLClient } from \"@mysten/sui/graphql\";\nimport { graphql } from \"@mysten/sui/graphql/schemas/2024.4\";\nimport type { Transaction } from \"@mysten/sui/transactions\";\nimport {\n  fromBase58,\n  fromBase64,\n  fromHex,\n  SUI_CLOCK_OBJECT_ID,\n  toBase58,\n  toHex,\n} from \"@mysten/sui/utils\";\nimport type {\n  BridgeEnclaveResponse,\n  Queue as SolanaQueue,\n} from \"@switchboard-xyz/on-demand\";\nimport {\n  getDefaultDevnetGuardianQueue,\n  getDefaultGuardianQueue,\n  ON_DEMAND_DEVNET_GUARDIAN_QUEUE,\n  ON_DEMAND_MAINNET_GUARDIAN_QUEUE,\n} from \"@switchboard-xyz/on-demand\";\n\nexport interface OracleInitParams extends CommonOptions {\n  oracleKey: string;\n  isGuardian?: boolean;\n}\n\nexport interface OracleAttestParams extends CommonOptions {\n  minAttestations: number;\n  isGuardian?: boolean;\n  solanaRPCUrl?: string;\n}\nexport interface OracleData {\n  expirationTime: number;\n  id: string;\n  mrEnclave: string;\n  oracleKey: string;\n  queue: string;\n  queueKey: string;\n  secp256k1Key: string;\n  validAttestations: any[];\n}\n\nexport class Oracle {\n  constructor(readonly client: SwitchboardClient, readonly address: string) {}\n\n  /**\n   * Create a new Oracle\n   */\n  public static async initTx(\n    client: SwitchboardClient,\n    tx: Transaction,\n    options: OracleInitParams\n  ) {\n    const { switchboardAddress, oracleQueueId, guardianQueueId } =\n      await client.fetchState(options);\n    const queueId = options.isGuardian ? guardianQueueId : oracleQueueId;\n    tx.moveCall({\n      target: `${switchboardAddress}::oracle_init_action::run`,\n      arguments: [\n        tx.pure.vector(\"u8\", Array.from(fromHex(options.oracleKey))),\n        tx.object(queueId),\n      ],\n    });\n  }\n\n  /**\n   * Oracle attest Tx\n   */\n  public async attestTx(tx: Transaction, options: OracleAttestParams) {\n    const { switchboardAddress, oracleQueueId, guardianQueueId } =\n      await this.client.fetchState(options);\n\n    const queueId = options.isGuardian ? guardianQueueId : oracleQueueId;\n\n    const oracleData = await this.loadData();\n\n    // get the sui queue from cache\n    let suiQueue = suiQueueCache.get(oracleData.queue);\n    if (!suiQueue) {\n      const queue = await new Queue(this.client, queueId).loadData();\n      suiQueueCache.set(queueId, queue);\n      suiQueue = queue;\n    }\n\n    let suiGuardianQueue = suiQueueCache.get(suiQueue.guardianQueueId);\n    if (!suiGuardianQueue) {\n      const queue = await new Queue(\n        this.client,\n        suiQueue.guardianQueueId\n      ).loadData();\n      suiQueueCache.set(suiQueue.guardianQueueId, queue);\n      suiGuardianQueue = queue;\n    }\n\n    // load the solana guardian queue from cache or fetch it\n    let solanaGuardianQueue: SolanaQueue;\n    if (\n      suiGuardianQueue.queueKey == ON_DEMAND_MAINNET_GUARDIAN_QUEUE.toBase58()\n    ) {\n      solanaGuardianQueue = solanaProgramCache.get(\n        ON_DEMAND_MAINNET_GUARDIAN_QUEUE.toBase58()\n      );\n      if (!solanaGuardianQueue) {\n        solanaGuardianQueue = await getDefaultGuardianQueue(\n          options.solanaRPCUrl\n        );\n        solanaProgramCache.set(\n          ON_DEMAND_MAINNET_GUARDIAN_QUEUE.toBase58(),\n          solanaGuardianQueue\n        );\n      }\n    } else if (\n      suiQueue.queueKey == ON_DEMAND_DEVNET_GUARDIAN_QUEUE.toBase58()\n    ) {\n      solanaGuardianQueue = solanaProgramCache.get(\n        ON_DEMAND_DEVNET_GUARDIAN_QUEUE.toBase58()\n      );\n      if (!solanaGuardianQueue) {\n        solanaGuardianQueue = await getDefaultDevnetGuardianQueue(\n          options.solanaRPCUrl\n        );\n        solanaProgramCache.set(\n          ON_DEMAND_DEVNET_GUARDIAN_QUEUE.toBase58(),\n          solanaGuardianQueue\n        );\n      }\n    }\n\n    // load up the gateways\n    const guardianGateways = await solanaGuardianQueue.fetchAllGateways();\n\n    // get the bridge messages\n    const getBridgingMessages = async (): Promise<BridgeEnclaveResponse[]> => {\n      // shuffle the gateways\n      guardianGateways.sort(() => Math.random() - 0.5);\n\n      // slice min attestations\n      const gateways = guardianGateways.slice(0, options.minAttestations);\n\n      // bridge gateway promises\n      const gatewayPromises = gateways.map((g) =>\n        g.fetchBridgingMessage({\n          chainHash: \"0\".repeat(64),\n          oraclePubkey: toHex(fromBase58(oracleData.oracleKey)),\n          queuePubkey: toHex(fromBase58(oracleData.queueKey)),\n        })\n      );\n\n      // wait until they're all settled\n      const messages = await Promise.allSettled(gatewayPromises);\n\n      // get the bridge messages\n      return messages\n        .map((m) => {\n          if (m.status === \"fulfilled\") {\n            return m.value;\n          }\n        })\n        .filter((m) => m);\n    };\n\n    const bridgeMessages: BridgeEnclaveResponse[] = [];\n\n    // try 3 times to get the bridge messages\n    for (let i = 0; i < 3; i++) {\n      bridgeMessages.push(...(await getBridgingMessages()));\n      if (bridgeMessages.length >= options.minAttestations) {\n        break;\n      }\n    }\n\n    // if we don't have enough bridge messages - throw an error\n    if (bridgeMessages.length < options.minAttestations) {\n      throw new Error(\"Not enough bridge messages\");\n    }\n\n    bridgeMessages.forEach((message: BridgeEnclaveResponse) => {\n      const signature = Array.from(fromBase64(message.signature));\n      signature.push(message.recovery_id);\n      const mrEnclave = message.mr_enclave;\n      const secp256k1Key = message.oracle_secp256k1_enclave_signer;\n      const guardian = toBase58(fromHex(message.guardian));\n      const guardianId = suiGuardianQueue.existingOracles.find(\n        (o) => o.oracleKey === guardian\n      )?.oracleId;\n\n      if (!guardianId) {\n        console.error(\"Guardian not found\", guardian);\n        return;\n      }\n\n      tx.moveCall({\n        target: `${switchboardAddress}::oracle_attest_action::run`,\n        arguments: [\n          tx.object(this.address),\n          tx.object(oracleData.queue),\n          tx.object(guardianId),\n          tx.pure.u64(message.timestamp),\n          tx.pure.vector(\"u8\", Array.from(fromHex(mrEnclave))),\n          tx.pure.vector(\"u8\", Array.from(fromHex(secp256k1Key))),\n          tx.pure.vector(\"u8\", signature),\n          tx.object(SUI_CLOCK_OBJECT_ID),\n        ],\n      });\n    });\n  }\n\n  public static parseOracleData(oracleData: any): OracleData {\n    return {\n      expirationTime: ObjectParsingHelper.asNumber(\n        oracleData.expiration_time_ms\n      ),\n      id: ObjectParsingHelper.asId(oracleData.id),\n      mrEnclave: toHex(ObjectParsingHelper.asUint8Array(oracleData.mr_enclave)),\n      oracleKey: toBase58(\n        ObjectParsingHelper.asUint8Array(oracleData.oracle_key)\n      ),\n      queue: ObjectParsingHelper.asString(oracleData.queue),\n      queueKey: toBase58(\n        ObjectParsingHelper.asUint8Array(oracleData.queue_key)\n      ),\n      secp256k1Key: toHex(\n        ObjectParsingHelper.asUint8Array(oracleData.secp256k1_key)\n      ),\n      validAttestations: ObjectParsingHelper.asArray(\n        oracleData.valid_attestations\n      ),\n    };\n  }\n\n  /**\n   * Get the oracle data object\n   */\n  public async loadData(): Promise<OracleData> {\n    const oracleData = await this.client.client\n      .getObject({\n        id: this.address,\n        options: {\n          showContent: true,\n          showType: true,\n        },\n      })\n      .then(getFieldsFromObject);\n\n    return Oracle.parseOracleData(oracleData);\n  }\n\n  public static async loadAllOracles(\n    graphqlClient: SuiGraphQLClient,\n    switchboardAddress: string\n  ): Promise<OracleData[]> {\n    const fetchAggregatorsQuery = graphql(`\n      query {\n        objects(\n          filter: {\n            type: \"${switchboardAddress}::oracle::Oracle\"\n          }\n        ) {\n          nodes {\n            address\n            digest\n            asMoveObject {\n              contents {\n                json\n              }\n            }\n          }\n        }\n      }\n    `);\n    const result = await graphqlClient.query({\n      query: fetchAggregatorsQuery,\n    });\n\n    const oracleData: OracleData[] = result.data?.objects?.nodes?.map(\n      (result) => {\n        const moveObject = result.asMoveObject.contents.json as any;\n\n        // build the data object from moveObject which looks like the above json\n        return {\n          expirationTime: ObjectParsingHelper.asNumber(\n            moveObject.expiration_time_ms\n          ),\n          id: moveObject.id,\n          mrEnclave: toHex(\n            ObjectParsingHelper.asUint8Array(moveObject.mr_enclave)\n          ),\n          oracleKey: toBase58(\n            ObjectParsingHelper.asUint8Array(moveObject.oracle_key)\n          ),\n          queue: ObjectParsingHelper.asString(moveObject.queue),\n          queueKey: toBase58(\n            ObjectParsingHelper.asUint8Array(moveObject.queue_key)\n          ),\n          secp256k1Key: toHex(\n            ObjectParsingHelper.asUint8Array(moveObject.secp256k1_key)\n          ),\n          validAttestations: ObjectParsingHelper.asArray(\n            moveObject.valid_attestations\n          ),\n        };\n      }\n    );\n\n    return oracleData;\n  }\n\n  public static async loadMany(\n    client: SwitchboardClient,\n    oracles: string[]\n  ): Promise<OracleData[]> {\n    const oracleData = await client.client\n      .multiGetObjects({\n        ids: oracles,\n        options: {\n          showContent: true,\n          showType: true,\n        },\n      })\n      .then((o) => o.map(getFieldsFromObject));\n\n    return oracleData.map((o) => this.parseOracleData(o));\n  }\n}\n"]}