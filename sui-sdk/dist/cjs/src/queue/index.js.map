{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/queue/index.ts"],"names":[],"mappings":"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","sourcesContent":["import type { CommonOptions, OracleData, SwitchboardClient } from \"../index.js\";\nimport { getFieldsFromObject, ObjectParsingHelper } from \"../index.js\";\nimport { Oracle } from \"../oracle/index.js\";\n\nimport type { DynamicFieldInfo } from \"@mysten/sui/client\";\nimport type { Transaction } from \"@mysten/sui/transactions\";\nimport { fromHex, toBase58 } from \"@mysten/sui/utils\";\nimport { SUI_CLOCK_OBJECT_ID } from \"@mysten/sui/utils\";\n\nexport interface QueueInitParams extends CommonOptions {\n  queueKey: string;\n  authority: string;\n  name: string;\n  fee: number;\n  feeRecipient: string;\n  minAttestations: number;\n  oracleValidityLengthMs: number;\n  guardianQueueId?: string;\n  isGuardianQueue?: boolean;\n}\n\nexport interface QueueSetConfigsParams extends CommonOptions {\n  name: string;\n  fee: number;\n  feeRecipient: string;\n  minAttestations: number;\n  oracleValidityLengthMs: number;\n}\n\nexport interface QueueSetAuthorityParams extends CommonOptions {\n  newAuthority: string;\n}\n\nexport interface QueueOverrideOracleParams extends CommonOptions {\n  oracle: string;\n  secp256k1Key: string;\n  mrEnclave: string;\n  expirationTimeMs: number;\n}\n\nexport interface QueueSetFeeTypeParams extends CommonOptions {\n  feeType: string;\n}\n\nexport interface QueueData {\n  authority: string;\n  existingOracles: {\n    oracleId: string;\n    oracleKey: string;\n  }[];\n  fee: number;\n  feeRecipient: string;\n  feeTypes: {\n    type: string;\n    fields: Record<string, unknown>;\n  }[];\n  guardianQueueId: string;\n  id: string;\n  lastQueueOverrideMs: number;\n  minAttestations: number;\n  name: string;\n  oracleValidityLengthMs: number;\n  queueKey: string;\n}\n\nexport class Queue {\n  constructor(readonly client: SwitchboardClient, readonly address: string) {}\n\n  /**\n   * Create a new Queue\n   */\n  public static async initTx(\n    client: SwitchboardClient,\n    tx: Transaction,\n    options: QueueInitParams\n  ) {\n    const { switchboardAddress } = await client.fetchState(options);\n\n    if (options.isGuardianQueue) {\n      tx.moveCall({\n        target: `${switchboardAddress}::guardian_queue_init_action::run`,\n        arguments: [\n          tx.pure.vector(\"u8\", Array.from(fromHex(options.queueKey))),\n          tx.pure.address(options.authority),\n          tx.pure.string(options.name),\n          tx.pure.u64(options.fee),\n          tx.pure.address(options.feeRecipient),\n          tx.pure.u64(options.minAttestations),\n          tx.pure.u64(options.oracleValidityLengthMs),\n        ],\n      });\n    } else {\n      if (!options.guardianQueueId) {\n        throw new Error(\"guardianQueueId is required for non-guardian queues\");\n      }\n      tx.moveCall({\n        target: `${switchboardAddress}::oracle_queue_init_action::run`,\n        arguments: [\n          tx.pure.vector(\"u8\", Array.from(fromHex(options.queueKey))),\n          tx.pure.address(options.authority),\n          tx.pure.string(options.name),\n          tx.pure.u64(options.fee),\n          tx.pure.address(options.feeRecipient),\n          tx.pure.u64(options.minAttestations),\n          tx.pure.u64(options.oracleValidityLengthMs),\n          tx.object(options.guardianQueueId),\n        ],\n      });\n    }\n  }\n\n  /**\n   * Queue set configs tx\n   */\n  public async setConfigsTx(tx: Transaction, options: QueueSetConfigsParams) {\n    const { switchboardAddress } = await this.client.fetchState(options);\n\n    tx.moveCall({\n      target: `${switchboardAddress}::queue_set_configs_action::run`,\n      arguments: [\n        tx.object(this.address),\n        tx.pure.string(options.name),\n        tx.pure.u64(options.fee),\n        tx.pure.address(options.feeRecipient),\n        tx.pure.u64(options.minAttestations),\n        tx.pure.u64(options.oracleValidityLengthMs),\n      ],\n    });\n  }\n\n  /**\n   * Queue set authority tx\n   */\n  public async setAuthorityTx(\n    tx: Transaction,\n    options: QueueSetAuthorityParams\n  ) {\n    const { switchboardAddress } = await this.client.fetchState(options);\n\n    tx.moveCall({\n      target: `${switchboardAddress}::queue_set_authority_action::run`,\n      arguments: [\n        tx.object(this.address),\n        tx.pure.address(options.newAuthority),\n      ],\n    });\n  }\n\n  /**\n   * Queue override oracle tx\n   */\n  public async overrideOracleTx(\n    tx: Transaction,\n    options: QueueOverrideOracleParams\n  ) {\n    const { switchboardAddress } = await this.client.fetchState(options);\n    tx.moveCall({\n      target: `${switchboardAddress}::queue_override_oracle_action::run`,\n      arguments: [\n        tx.object(this.address),\n        tx.object(options.oracle),\n        tx.pure.vector(\"u8\", Array.from(fromHex(options.secp256k1Key))),\n        tx.pure.vector(\"u8\", Array.from(fromHex(options.mrEnclave))),\n        tx.pure.u64(options.expirationTimeMs),\n        tx.object(SUI_CLOCK_OBJECT_ID),\n      ],\n    });\n  }\n\n  /**\n   * Queue add fee type tx\n   */\n  public async addFeeTypeTx(tx: Transaction, options: QueueSetFeeTypeParams) {\n    const { switchboardAddress } = await this.client.fetchState(options);\n    tx.moveCall({\n      target: `${switchboardAddress}::queue_add_fee_type_action::run`,\n      arguments: [tx.object(this.address)],\n      typeArguments: [options.feeType],\n    });\n  }\n\n  /**\n   * Queue remove fee type tx\n   */\n  public async removeFeeTypeTx(\n    tx: Transaction,\n    options: QueueSetFeeTypeParams\n  ) {\n    const { switchboardAddress } = await this.client.fetchState(options);\n    tx.moveCall({\n      target: `${switchboardAddress}::queue_remove_fee_type_action::run`,\n      arguments: [tx.object(this.address)],\n      typeArguments: [options.feeType],\n    });\n  }\n\n  /**\n   * Get the queue data object\n   */\n  public async loadData(): Promise<QueueData> {\n    const rpcResponseData = await this.client.client\n      .getObject({\n        id: this.address,\n        options: {\n          showContent: true,\n          showType: true,\n        },\n      })\n      .then(getFieldsFromObject);\n\n    // Fetch the exisitng oracles\n    const existingOraclesResponse: any = rpcResponseData.existing_oracles;\n    const existingOraclesObjects: DynamicFieldInfo[] = [];\n    let existingOraclesDynamicFields =\n      await this.client.client.getDynamicFields({\n        parentId: existingOraclesResponse.fields.id.id,\n      });\n    existingOraclesObjects.push(...existingOraclesDynamicFields.data);\n    while (existingOraclesDynamicFields.hasNextPage) {\n      existingOraclesDynamicFields = await this.client.client.getDynamicFields({\n        parentId: existingOraclesDynamicFields.nextCursor,\n      });\n      existingOraclesObjects.push(...existingOraclesDynamicFields.data);\n    }\n\n    // fetch existing oracles objects\n    const realExistingOraclesContents =\n      await this.client.client.multiGetObjects({\n        ids: existingOraclesObjects.map((o) => {\n          return o.objectId;\n        }),\n        options: {\n          showContent: true,\n        },\n      });\n\n    // parse the existing oracles\n    const existingOracles = realExistingOraclesContents.map((o) => {\n      const fields: any = getFieldsFromObject(o);\n      return {\n        oracleId: ObjectParsingHelper.asString(fields.value.fields.oracle_id),\n        oracleKey: toBase58(\n          ObjectParsingHelper.asUint8Array(fields.value.fields.oracle_key)\n        ),\n      };\n    });\n\n    // build from the result\n    const data: QueueData = {\n      // get authority address\n      authority: ObjectParsingHelper.asString(rpcResponseData.authority),\n\n      // get existing oracles (TODO)\n      existingOracles: existingOracles,\n\n      // get fee number (though encoded as string)\n      fee: ObjectParsingHelper.asNumber(rpcResponseData.fee),\n\n      // fee recipient address\n      feeRecipient: ObjectParsingHelper.asString(rpcResponseData.fee_recipient),\n\n      // accepted fee coin types\n      feeTypes: ObjectParsingHelper.asArray(rpcResponseData.fee_types).map(\n        (ft: any) => ft.fields.name\n      ),\n\n      // guardian queue id\n      guardianQueueId: ObjectParsingHelper.asString(\n        rpcResponseData.guardian_queue_id\n      ),\n\n      // queue id\n      id: ObjectParsingHelper.asId(rpcResponseData.id),\n\n      // last queue override ms\n      lastQueueOverrideMs: ObjectParsingHelper.asNumber(\n        rpcResponseData.last_queue_override_ms\n      ),\n\n      // minimum attestations\n      minAttestations: ObjectParsingHelper.asNumber(\n        rpcResponseData.min_attestations\n      ),\n\n      // queue name\n      name: ObjectParsingHelper.asString(rpcResponseData.name),\n      oracleValidityLengthMs: ObjectParsingHelper.asNumber(\n        rpcResponseData.oracle_validity_length_ms\n      ),\n\n      // get source queue key\n      queueKey: toBase58(\n        ObjectParsingHelper.asUint8Array(\n          rpcResponseData.queue_key\n        ) as Uint8Array\n      ),\n    };\n\n    return data;\n  }\n\n  /**\n   * Load oracle data\n   */\n  async loadOracleData(): Promise<OracleData[]> {\n    const queueData = await this.loadData();\n    const oracleIds = queueData.existingOracles.map((o) => o.oracleId);\n    return Oracle.loadMany(this.client, oracleIds);\n  }\n}\n"]}