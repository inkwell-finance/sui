{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/aggregator/index.ts"],"names":[],"mappings":"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","sourcesContent":["import type { CommonOptions, SwitchboardClient } from \"../index.js\";\nimport {\n  getFieldsFromObject,\n  ObjectParsingHelper,\n  Queue,\n  solanaProgramCache,\n  suiQueueCache,\n} from \"../index.js\";\n\nimport type { SuiGraphQLClient } from \"@mysten/sui/graphql\";\nimport { graphql } from \"@mysten/sui/graphql/schemas/2024.4\";\nimport type { Transaction } from \"@mysten/sui/transactions\";\nimport {\n  fromBase64,\n  fromHex,\n  SUI_CLOCK_OBJECT_ID,\n  SUI_TYPE_ARG,\n  toBase58,\n  toHex,\n} from \"@mysten/sui/utils\";\nimport { CrossbarClient, OracleJob } from \"@switchboard-xyz/common\";\nimport type {\n  FeedEvalResponse,\n  Queue as SolanaQueue,\n} from \"@switchboard-xyz/on-demand\";\nimport {\n  getDefaultDevnetQueue,\n  getDefaultQueue,\n  ON_DEMAND_DEVNET_QUEUE,\n  ON_DEMAND_MAINNET_QUEUE,\n} from \"@switchboard-xyz/on-demand\";\nimport type BN from \"bn.js\";\n\nexport interface AggregatorInitParams extends CommonOptions {\n  authority: string;\n  name: string;\n  feedHash: string;\n  minSampleSize: number;\n  maxStalenessSeconds: number;\n  maxVariance: number;\n  minResponses: number;\n}\n\nexport interface AggregatorConfigParams extends CommonOptions {\n  aggregator: string;\n  name: string;\n  feedHash: string;\n  minSampleSize: number;\n  maxStalenessSeconds: number;\n  maxVariance: number;\n  minResponses: number;\n}\n\nexport interface AggregatorSetAuthorityParams extends CommonOptions {\n  aggregator: string;\n  newAuthority: string;\n}\n\nexport interface AggregatorConfigs {\n  feedHash: string;\n  maxVariance: number;\n  minResponses: number;\n  minSampleSize: number;\n}\n\nexport interface AggregatorFetchUpdateIxParams extends CommonOptions {\n  solanaRPCUrl?: string;\n  crossbarUrl?: string;\n  crossbarClient?: CrossbarClient;\n\n  // If passed in, Sui Aggregator load can be skipped\n  feedConfigs?: AggregatorConfigs;\n\n  // If passed in, Sui Queue load can be skipped\n  queue?: Queue;\n}\n\nexport interface CurrentResultData {\n  maxResult: BN;\n  maxTimestamp: number;\n  mean: BN;\n  minResult: BN;\n  minTimestamp: number;\n  range: BN;\n  result: BN;\n  stdev: BN;\n}\n\nexport interface Update {\n  oracle: string;\n  value: BN;\n  timestamp: number;\n}\n\nexport interface AggregatorData {\n  id: string;\n  authority: string;\n  createdAtMs: number;\n  currentResult: CurrentResultData;\n  feedHash: string;\n  maxStalenessSeconds: number;\n  maxVariance: number;\n  minResponses: number;\n  minSampleSize: number;\n  name: string;\n  queue: string;\n  updateState: {\n    currIdx: number;\n    results: Update[];\n  };\n}\n\nexport class Aggregator {\n  public crossbarClient?: CrossbarClient;\n  public feedHash?: string;\n\n  constructor(readonly client: SwitchboardClient, readonly address: string) {}\n\n  /**\n   * Create a new Aggregator\n   * @param client - SuiClient\n   * @param tx - Transaction\n   * @param options - AggregatorInitParams\n   * @constructor\n   */\n  public static async initTx(\n    client: SwitchboardClient,\n    tx: Transaction,\n    options: AggregatorInitParams\n  ) {\n    const { switchboardAddress, oracleQueueId } = await client.fetchState(\n      options\n    );\n\n    tx.moveCall({\n      target: `${switchboardAddress}::aggregator_init_action::run`,\n      arguments: [\n        tx.object(oracleQueueId),\n        tx.pure.address(options.authority),\n        tx.pure.string(options.name),\n        tx.pure.vector(\"u8\", Array.from(fromHex(options.feedHash))),\n        tx.pure.u64(options.minSampleSize),\n        tx.pure.u64(options.maxStalenessSeconds),\n        tx.pure.u64(options.maxVariance),\n        tx.pure.u32(options.minResponses),\n        tx.object(SUI_CLOCK_OBJECT_ID),\n      ],\n    });\n  }\n\n  /**\n   * Set configs for the Aggregator\n   * @param tx - Transaction\n   * @param options - AggregatorConfigParams\n   */\n  public async setConfigsTx(tx: Transaction, options: AggregatorConfigParams) {\n    const { switchboardAddress } = await this.client.fetchState(options);\n\n    tx.moveCall({\n      target: `${switchboardAddress}::aggregator_set_configs_action::run`,\n      arguments: [\n        tx.object(this.address),\n        tx.pure.vector(\"u8\", Array.from(fromHex(options.feedHash))),\n        tx.pure.u64(options.minSampleSize),\n        tx.pure.u64(options.maxStalenessSeconds),\n        tx.pure.u64(options.maxVariance),\n        tx.pure.u32(options.minResponses),\n      ],\n    });\n  }\n\n  /**\n   * Set the feed authority\n   * @param tx - Transaction\n   * @param options - AggregatorSetAuthorityParams\n   */\n  public async setAuthorityTx(\n    tx: Transaction,\n    options: AggregatorSetAuthorityParams\n  ) {\n    const { switchboardAddress } = await this.client.fetchState(options);\n\n    tx.moveCall({\n      target: `${switchboardAddress}::aggregator_set_authority_action::run`,\n      arguments: [\n        tx.object(this.address),\n        tx.pure.address(options.newAuthority),\n      ],\n    });\n  }\n\n  /**\n   * Pull feed tx\n   * @param tx - Transaction\n   * @param options - CommonOptions\n   */\n  public async fetchUpdateTx(\n    tx: Transaction,\n    options?: AggregatorFetchUpdateIxParams\n  ): Promise<{\n    responses: FeedEvalResponse[];\n    failures: string[];\n  }> {\n    const { switchboardAddress, oracleQueueId } = await this.client.fetchState(\n      options\n    );\n\n    // get the feed configs if we need them / they aren't passed in\n    let feedConfigs = options?.feedConfigs;\n    if (!feedConfigs) {\n      const aggregatorData = await this.loadData();\n      feedConfigs = {\n        minSampleSize: aggregatorData.minSampleSize,\n        feedHash: aggregatorData.feedHash,\n        maxVariance: aggregatorData.maxVariance,\n        minResponses: aggregatorData.minResponses,\n      };\n    }\n\n    // get the sui queue from cache\n    let suiQueue = suiQueueCache.get(oracleQueueId);\n    if (!suiQueue) {\n      const queue = await new Queue(this.client, oracleQueueId).loadData();\n      suiQueueCache.set(oracleQueueId, queue);\n      suiQueue = queue;\n    }\n\n    // load the solana queue from cache or fetch it\n    let solanaQueue: SolanaQueue;\n    if (suiQueue.queueKey === ON_DEMAND_MAINNET_QUEUE.toBase58()) {\n      solanaQueue = solanaProgramCache.get(ON_DEMAND_MAINNET_QUEUE.toBase58());\n      if (!solanaQueue) {\n        solanaQueue = await getDefaultQueue(options?.solanaRPCUrl);\n        solanaProgramCache.set(ON_DEMAND_MAINNET_QUEUE.toBase58(), solanaQueue);\n      }\n    } else if (suiQueue.queueKey === ON_DEMAND_DEVNET_QUEUE.toBase58()) {\n      solanaQueue = solanaProgramCache.get(ON_DEMAND_DEVNET_QUEUE.toBase58());\n      if (!solanaQueue) {\n        solanaQueue = await getDefaultDevnetQueue(options?.solanaRPCUrl);\n        solanaProgramCache.set(ON_DEMAND_DEVNET_QUEUE.toBase58(), solanaQueue);\n      }\n    } else {\n      throw new Error(\"[fetchUpdateTx]: QUEUE NOT FOUND\");\n    }\n\n    // fail out if we can't load the queue\n    if (!solanaQueue) {\n      throw new Error(\n        `Could not load the Switchboard Queue - Queue pubkey: ${suiQueue.queueKey}`\n      );\n    }\n\n    // fetch the jobs from crossbar\n    const crossbarClient =\n      options?.crossbarClient ??\n      new CrossbarClient(\n        options?.crossbarUrl ?? \"https://crossbar.switchboard.xyz\"\n      );\n    const jobs: OracleJob[] = await crossbarClient\n      .fetch(feedConfigs.feedHash)\n      .then((res) => res.jobs.map((job) => OracleJob.fromObject(job)));\n\n    // fetch the signatures\n    const { responses, failures } = await solanaQueue.fetchSignatures({\n      jobs,\n\n      // Make this more granular in the canonical fetch signatures (within @switchboard-xyz/on-demand)\n      maxVariance: Math.floor(feedConfigs.maxVariance / 1e9),\n      minResponses: feedConfigs.minResponses,\n      numSignatures: feedConfigs.minSampleSize,\n\n      // blockhash checks aren't possible yet on SUI\n      recentHash: toBase58(new Uint8Array(32)),\n      useTimestamp: true,\n    });\n\n    // filter out responses that don't have available oracles\n    const validOracles = new Set(\n      suiQueue.existingOracles.map((o) => o.oracleKey)\n    );\n\n    const validResponses = responses.filter((r) => {\n      return validOracles.has(toBase58(fromHex(r.oracle_pubkey)));\n    });\n\n    // if we have no valid responses (or not enough), fail out\n    if (\n      !validResponses.length ||\n      validResponses.length < feedConfigs.minSampleSize\n    ) {\n      // maybe retry by recursing into the same function / add a retry count\n      throw new Error(\"Not enough valid oracle responses.\");\n    }\n\n    // split the gas coin into the right amount for each response\n    const coins = tx.splitCoins(\n      tx.gas,\n      validResponses.map(() => suiQueue.fee)\n    );\n\n    // map the responses into the tx\n    validResponses.forEach((response, i) => {\n      const oracle = suiQueue.existingOracles.find(\n        (o) => o.oracleKey === toBase58(fromHex(response.oracle_pubkey))\n      )!;\n\n      const signature = Array.from(fromBase64(response.signature));\n      signature.push(response.recovery_id);\n\n      tx.moveCall({\n        target: `${switchboardAddress}::aggregator_submit_result_action::run`,\n        arguments: [\n          tx.object(this.address),\n          tx.object(suiQueue.id),\n          tx.pure.u128(response.success_value),\n          tx.pure.bool(response.success_value.startsWith(\"-\")),\n          tx.pure.u64(response.timestamp!),\n          tx.object(oracle.oracleId),\n          tx.pure.vector(\"u8\", signature),\n          tx.object(SUI_CLOCK_OBJECT_ID),\n          coins[i],\n        ],\n        typeArguments: [SUI_TYPE_ARG],\n      });\n    });\n\n    return { responses, failures };\n  }\n\n  /**\n   * Get the feed data object\n   */\n  public async loadData(): Promise<AggregatorData> {\n    const aggregatorData = await this.client.client\n      .getObject({\n        id: this.address,\n        options: {\n          showContent: true,\n          showType: false,\n        },\n      })\n      .then(getFieldsFromObject);\n\n    const currentResult = (aggregatorData.current_result as any).fields;\n    const updateState = (aggregatorData.update_state as any).fields;\n\n    // build the data object\n    const data: AggregatorData = {\n      id: ObjectParsingHelper.asId(aggregatorData.id),\n      authority: ObjectParsingHelper.asString(aggregatorData.authority),\n      createdAtMs: ObjectParsingHelper.asNumber(aggregatorData.created_at_ms),\n      currentResult: {\n        maxResult: ObjectParsingHelper.asBN(currentResult.max_result),\n        maxTimestamp: ObjectParsingHelper.asNumber(\n          currentResult.max_timestamp_ms\n        ),\n        mean: ObjectParsingHelper.asBN(currentResult.mean),\n        minResult: ObjectParsingHelper.asBN(currentResult.min_result),\n        minTimestamp: ObjectParsingHelper.asNumber(\n          currentResult.min_timestamp_ms\n        ),\n        range: ObjectParsingHelper.asBN(currentResult.range),\n        result: ObjectParsingHelper.asBN(currentResult.result),\n        stdev: ObjectParsingHelper.asBN(currentResult.stdev),\n      },\n      feedHash: toHex(\n        ObjectParsingHelper.asUint8Array(aggregatorData.feed_hash)\n      ),\n      maxStalenessSeconds: ObjectParsingHelper.asNumber(\n        aggregatorData.max_staleness_seconds\n      ),\n      maxVariance: ObjectParsingHelper.asNumber(aggregatorData.max_variance),\n      minResponses: ObjectParsingHelper.asNumber(aggregatorData.min_responses),\n      minSampleSize: ObjectParsingHelper.asNumber(\n        aggregatorData.min_sample_size\n      ),\n      name: ObjectParsingHelper.asString(aggregatorData.name),\n      queue: ObjectParsingHelper.asString(aggregatorData.queue),\n      updateState: {\n        currIdx: ObjectParsingHelper.asNumber(updateState.curr_idx),\n        results: updateState.results.map((r: any) => {\n          const oracleId = r.fields.oracle;\n          const value = ObjectParsingHelper.asBN(r.fields.result.fields);\n          const timestamp = parseInt(r.fields.timestamp_ms);\n          return {\n            oracle: oracleId,\n            value,\n            timestamp,\n          };\n        }),\n      },\n    };\n\n    return data;\n  }\n\n  /**\n   * Load all feeds\n   */\n  public static async loadAllFeeds(\n    graphqlClient: SuiGraphQLClient,\n    switchboardAddress: string\n  ): Promise<AggregatorData[]> {\n    // Query to fetch Aggregator objects with pagination supported.\n    const query = graphql(`\n      query($cursor: String) {\n        objects(\n          first: 50,\n          after: $cursor,\n          filter: {\n            type: \"${switchboardAddress}::aggregator::Aggregator\"\n          }\n        ) {\n          nodes {\n            address\n            digest\n            asMoveObject {\n              contents {\n                json\n              }\n            }\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    `);\n\n    const parseAggregator = (moveObject: any): AggregatorData => {\n      return {\n        id: moveObject.id,\n        authority: moveObject.authority,\n        createdAtMs: ObjectParsingHelper.asNumber(moveObject.created_at_ms),\n        currentResult: {\n          maxResult: ObjectParsingHelper.asBN(\n            moveObject.current_result.max_result\n          ),\n          maxTimestamp: ObjectParsingHelper.asNumber(\n            moveObject.current_result.max_timestamp_ms\n          ),\n          mean: ObjectParsingHelper.asBN(moveObject.current_result.mean),\n          minResult: ObjectParsingHelper.asBN(\n            moveObject.current_result.min_result\n          ),\n          minTimestamp: ObjectParsingHelper.asNumber(\n            moveObject.current_result.min_timestamp_ms\n          ),\n          range: ObjectParsingHelper.asBN(moveObject.current_result.range),\n          result: ObjectParsingHelper.asBN(moveObject.current_result.result),\n          stdev: ObjectParsingHelper.asBN(moveObject.current_result.stdev),\n        },\n        feedHash: toHex(ObjectParsingHelper.asUint8Array(moveObject.feed_hash)),\n        maxStalenessSeconds: ObjectParsingHelper.asNumber(\n          moveObject.max_staleness_seconds\n        ),\n        maxVariance: ObjectParsingHelper.asNumber(moveObject.max_variance),\n        minResponses: ObjectParsingHelper.asNumber(moveObject.min_responses),\n        minSampleSize: ObjectParsingHelper.asNumber(moveObject.min_sample_size),\n        name: ObjectParsingHelper.asString(moveObject.name),\n        queue: ObjectParsingHelper.asString(moveObject.queue),\n        updateState: {\n          currIdx: ObjectParsingHelper.asNumber(\n            moveObject.update_state.curr_idx\n          ),\n          results: moveObject.update_state.results.map((r: any) => {\n            const oracleId = r.oracle;\n            const value = ObjectParsingHelper.asBN(r.result);\n            const timestamp = parseInt(r.timestamp_ms);\n            return {\n              oracle: oracleId,\n              value,\n              timestamp,\n            };\n          }),\n        },\n      };\n    };\n\n    const fetchAggregators = async (cursor: string | null) => {\n      const results = await graphqlClient.query({\n        query,\n        variables: { cursor },\n      });\n\n      const aggregators: AggregatorData[] =\n        results.data?.objects?.nodes?.map((result) => {\n          const moveObject = result.asMoveObject!.contents!.json as any;\n          // build the data object from moveObject which looks like the above json\n          return parseAggregator(moveObject);\n        }) ?? [];\n      const hasNextPage = results.data?.objects?.pageInfo?.hasNextPage ?? false;\n      const endCursor = results.data?.objects?.pageInfo?.endCursor ?? null;\n\n      // Recursively fetch the next page if there is one.\n      if (hasNextPage) aggregators.push(...(await fetchAggregators(endCursor)));\n      // Return the list of aggregators.\n      return aggregators;\n    };\n    return await fetchAggregators(null);\n  }\n}\n"]}